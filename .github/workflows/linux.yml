name: Linux Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  formatting:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Install clang-format
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends clang-format-12

      - name: Format files
        run: find base libs modules test -type f -a \( -name "*.cc" -o -name "*.h" \) -print0 | xargs -0 clang-format-12 -i

      - name: Check for differences
        run: |
          git status --porcelain
          git status --porcelain | xargs -I {} -0 test -z \"{}\"

  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: macos-avx2
            cxx: clang++
            cc: clang
            mode: Release
            cxxflags: -stdlib=libc++
            os: macos-latest
          - name: macos-noavx2
            cxx: clang++
            cc: clang
            mode: Release
            cxxflags: -stdlib=libc++
            os: macos-latest
          - name: linux-amd64-debug
            cxx: g++-10
            cc: gcc-10
            mode: Debug
            os: ubuntu-20.04
            emulator: valgrind --error-exitcode=1
            install: ninja-build valgrind
          - name: linux-amd64-clang
            cxx: clang++-12
            cc: clang-12
            mode: Release
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
            mimalloc: Off
            install: ninja-build
          - name: linux-clang-tidy
            cxx: clang++-12
            cc: clang-12
            mode: Debug
            cxxflags: -stdlib=libc++
            ldflags: -lc++abi
            lint: true
            os: ubuntu-20.04
            install: ninja-build
          - name: linux-clang-sanitizer
            cxx: clang++-12
            cc: clang-12
            mode: Release
            cflags: -fsanitize=address,undefined -fno-omit-frame-pointer
            cxxflags: -fsanitize=address,undefined -fno-omit-frame-pointer -stdlib=libc++
            ldflags: -lc++abi
            os: ubuntu-20.04
            install: ninja-build
          - name: linux-amd64-release
            os: ubuntu-20.04
            toolchain: x86_64-multilib-linux-musl
            cross: -DCMAKE_TOOLCHAIN_FILE=/opt/x86_64-multilib-linux-musl/toolchain-amd64.cmake
            mode: Release
            artifact: linux-amd64
            install: ninja-build
          - name: linux-amd64-noavx-release
            os: ubuntu-20.04
            toolchain: x86_64-multilib-linux-musl
            cross: -DCMAKE_TOOLCHAIN_FILE=/opt/x86_64-multilib-linux-musl/toolchain-amd64.cmake
            mode: Release
            install: ninja-build
          - name: linux-x86-release
            os: ubuntu-20.04
            toolchain: x86_64-multilib-linux-musl
            cross: -DCMAKE_TOOLCHAIN_FILE=/opt/x86_64-multilib-linux-musl/toolchain-x86.cmake
            mode: Release
            install: ninja-build
          - name: linux-arm-release
            os: ubuntu-20.04
            toolchain: arm-unknown-linux-musleabihf
            cross: -DCMAKE_TOOLCHAIN_FILE=/opt/arm-unknown-linux-musleabihf/toolchain-arm.cmake
            mode: Release
            install: ninja-build qemu-user-static
            emulator: qemu-arm-static
          - name: linux-arm64-release
            os: ubuntu-20.04
            toolchain: aarch64-unknown-linux-musl
            cross: -DCMAKE_TOOLCHAIN_FILE=/opt/aarch64-unknown-linux-musl/toolchain-arm64.cmake
            install: ninja-build qemu-user-static
            emulator: qemu-aarch64-static

    steps:
      - uses: actions/checkout@v2

      - uses: seanmiddleditch/gha-setup-ninja@master
        if: matrix.config.os == 'macos-latest'

      - name: Update APT
        if: matrix.config.os != 'macos-latest'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update

      - name: Install LLVM
        if: matrix.config.os != 'macos-latest' && matrix.config.cc == 'clang-12'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 12
          rm llvm.sh
          sudo apt-get install -y --no-install-recommends libc++-12-dev libc++abi-12-dev clang-tidy-12 libunwind-12-dev

      - name: Install Packages
        if: matrix.config.os != 'macos-latest'
        run: sudo apt-get install -y --no-install-recommends ${{ matrix.config.install }}

      - name: Install musl Toolchain
        if: matrix.config.toolchain
        run: |
          wget https://github.com/motis-project/musl-toolchains/releases/latest/download/${{ matrix.config.toolchain }}.tar.xz
          tar xf ${{ matrix.config.toolchain }}.tar.xz -C /opt

      - name: CMake
        run: |
          cmake ${{ matrix.config.cross }} \
            -G Ninja -S . -B build \
            -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
            -DCMAKE_C_FLAGS="${{ matrix.config.cflags }}" \
            -DCMAKE_CXX_FLAGS="${{ matrix.config.cxxflags }}" \
            -DCMAKE_CXX_FLAGS_DEBUG="" \
            -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.config.ldflags }}" \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.mode }} \
            -DCTX_LINT=${{ matrix.config.lint }} \
            -DCTX_ASAN=${{ contains(matrix.config.cxxflags, '-fsanitize=address') }} \
            -DCTX_VALGRIND=${{ matrix.config.cc == 'gcc-10' && matrix.config.mode == 'Debug' }}

      - name: Build
        run: |
          cmake --build build --target examples

      - name: Run Burn In
        run: ${{ matrix.config.emulator }} ./build/burn_in

      - name: Run Fibonacci
        run: ${{ matrix.config.emulator }} ./build/fibonacci

      - name: Run Locking
        run: ${{ matrix.config.emulator }} ./build/locking

      - name: Run Parallel For
        run: ${{ matrix.config.emulator }} ./build/parallel_for
